<?php
///==========================================================================================
/// NOTICE OF LICENSE & DISCLAIMER
///
/// This source file is subject to the Software License Agreement that is bundled with this 
/// package in the file license.txt, or you can get it here
/// http://addons-modules.com/en/content/3-terms-and-conditions-of-use
///
///	We donot recomend to make any changes(customizations) to the PHP files, othrwise you are
///	not able to upagrde your modules.
///
/// If you do need to make changes to source code files, please consult us first.
/// http://addons-modules.com/en/contact-us
///
///	Vist our support forum if you require technical support
/// http://addons-modules.com/modules/agileforumphpbb/agileforum.php
///
/// @copyright  2009-2012 Addons-Modules.com
/// 
///==========================================================================================

if (!defined('_CAN_LOAD_FILES_') AND _PS_VERSION_ > '1.3.2')   exit;     define('Agile_PrepaidCredit_Logging','on');    class AgilePrepaidCredit extends Module  {           const INSTALL_SQL_FILE = 'install.sql';     private $_html = '';   private $_postErrors = array();     function __construct()   {    $this->name = 'agileprepaidcredit';           if(defined('_IS_AGILE_DEV_'))copy( _PS_ROOT_DIR_ . "/AgileInstall.php",dirname(__FILE__) . "/AgileInstall.php");    if (!class_exists('AgileInstall', false))require_once(_PS_ROOT_DIR_  . "/modules/" . $this->name ."/AgileInstall.php");        if(_PS_VERSION_ >= '1.4')    {        $this->tab = 'administration';        $this->author = 'addons-modules.com';          }          else $this->tab = 'Blocks';    $this->version = 1.2;      parent::__construct();        $this->displayName = $this->l('Agile Prepaid Credit module');    $this->description = $this->l('Adds prepaid credit functionality to PrestaShop');       }     function install()   {          if(!AgileInstall::sql_install(dirname(__FILE__).'/'.self::INSTALL_SQL_FILE))              return false;           if  (parent::install() == false          OR Configuration::updateValue('AGILE_PCREDIT_UNITPRICE', 1) == false         OR Configuration::updateValue('AGILE_PCREDIT_CID', 0) == false         OR Configuration::updateValue('AGILE_PCREDIT_REPURCHASE', 0) == false         OR Configuration::updateValue('AGILE_PCREDIT_POSITION', 0) == false         OR Configuration::updateValue('PS_BLOCK_CART_AJAX', 0) == false     )     return false;              if (!$this->registerHook('leftcolumn')         OR !$this->registerHook('rightcolumn')        OR !$this->registerHook('newOrder')        OR !$this->registerHook('updateOrderStatus')        OR !$this->registerHook('postUpdateOrderStatus')              OR !$this->registerHook('top')              OR !$this->registerHook('footer')              OR !$this->registerHook('extraright')        )return false;                            return true;   }   public function uninstall()      {          if(!parent::uninstall())return false;            return true;      }     public function getContent()   {       global $cookie;       $this->_html = '<h2>'.$this->displayName.'</h2>';    $this->_html .= AgileInstall::show_agile_links();    if (Tools::isSubmit('submitSetting'))    {        $unitprice = floatval(Tools::getValue('unitprice'));     if (!$unitprice)      $this->_postErrors[] = '<div class="alert error">'.$this->l('You must set the "Unit Price" field').'</div>';                $pcredit_cid = floatval(Tools::getValue('pcredit_cid'));     if (!$pcredit_cid)      $this->_postErrors[] = '<div class="alert error">'.$this->l('You must select "Credit Product Category" field').'</div>';       if (!sizeof($this->_postErrors))     {      Configuration::updateValue('AGILE_PCREDIT_UNITPRICE', $unitprice);      Configuration::updateValue('AGILE_PCREDIT_CID', $pcredit_cid);         Configuration::updateValue('PS_BLOCK_CART_AJAX', 0);     Configuration::updateValue('AGILE_PCREDIT_POSITION', intval(Tools::getValue('prepaidcredit_pos')));      Configuration::updateValue('AGILE_PCREDIT_REPURCHASE', intval(Tools::getValue('repurchase')));                    $this->saveBlockSettings();        $this->displayConf();              }              else      $this->displayErrors();                   }                  $this->displayForm();    return $this->_html;   }     public function displayConf()   {    $this->_html .= '    <div class="conf confirm">     <img src="../img/admin/ok.gif" alt="'.$this->l('Confirmation').'" />     '.$this->l('Settings updated').'    </div>';   }     public function displayForm()   {       global $cookie;                 $unitprice = floatval(Configuration::get('AGILE_PCREDIT_UNITPRICE'));          $pcredit_cid = intval(Configuration::get('AGILE_PCREDIT_CID'));          $categories = Category::getCategories($cookie->id_lang, true, false);       $prepaidcredit_pos = intval(Configuration::get('AGILE_PCREDIT_POSITION'));       $repurchase = intval(Configuration::get('AGILE_PCREDIT_REPURCHASE'));          $defcurrency = new Currency(Configuration::get('PS_CURRENCY_DEFAULT'));      $this->_html .= '    <form action="'.$_SERVER['REQUEST_URI'].'" method="post">';    if(_PS_VERSION_ >= '1.4')        $this->_html .= '            <p style="border:solid 2px red;padding:10px; display:' . (file_exists(dirname(__FILE__) . "/../../override/controllers/CartController.php")?'none':'') . '">                '.$this->l('Please follow be instructions to copy a overrided file').'<br />                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>'.$this->l('From').'</b>: &nbsp;YoueStoreRoot/modules/agileprepaidcredit/override/controllers/CartController.php<br />                      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>'.$this->l('To').'</b>: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;YoueStoreRoot/override/controllers/   <br />            </p>';            $this->_html .= '     <fieldset id="instructions">     <legend><img src="'.$this->_path.'logo.gif" alt="" title="" />'.$this->l('Token Settings').'</legend>      <label>'.$this->l('Product Repurchase').'</label>      <div class="margin-form">                <input type="checkbox" name="repurchase" id="repurchase" value="1" ' . ($repurchase==1?'checked':'') . ' />                '.$this->l('Allow customer to purchase the same product for multiple times.').'      </div>          <label>'.$this->l('Token Unit Price').'</label>      <div class="margin-form">                ' . $defcurrency->sign . '<input type="text" name="unitprice" value="' . $unitprice . '" size=3 />      </div>        <label>'.$this->l('Credit Product Category').'</label>      <div class="margin-form">          <select name="pcredit_cid" id="pcredit_cid" style="width:450px;">';          foreach($categories AS $category)          {              $selected =  (intval($category['id_category'])==$pcredit_cid)?'selected':'';                    $this->_html .= '                  <option value="' . $category['id_category'] . '" ' . $selected . '>' . $category['name'] . '</option>                  ';          }                $this->_html .= '          </select>       <p class="clear">'.$this->l('Please select the category which contains all products for credits.').'</p>                  </div>';                                   $this->_html .= '         <label>'.$this->l('Display Position').'</label>         <div class="margin-form">             <input type=radio name="prepaidcredit_pos"  value="1" '. ($prepaidcredit_pos==1?'checked':'') . ' />'.$this->l('On Left Column').'&nbsp;&nbsp;&nbsp;             <input type=radio name="prepaidcredit_pos"  value="2" '. ($prepaidcredit_pos==2?'checked':'') . '/>'.$this->l('On Right Column').'&nbsp;&nbsp;&nbsp;             <input type=radio name="prepaidcredit_pos"  value="0" '. ($prepaidcredit_pos==0?'checked':'') . '/>'.$this->l('Don Not Display').'&nbsp;&nbsp;&nbsp;          <br />'.$this->l('You can adjust the position at [Modules] - [Positions] tab.').'                  </div>';                                              $this->_html .= '     </fieldset>          <fieldset id="fieldset_blocksetting">     <legend><img src="'.$this->_path.'logo.gif" alt="" title="" />'.$this->l('Field Settings').'</legend>      <label>'.$this->l('Field Visibilty').'</label>      <div class="margin-form">          <table cellpadding="3" cellspacing="3">';          $settings = self::getBlockSettings();                    foreach($this->getInfoBlocks() AS $block=>$mapping)          {                    $this->_html .= '<tr><td>' . $mapping . '</td>                        <td><input type="radio" name="visibility_' . $block . '" value="0" '. ($settings[$block]==0?'checked':'') . ' />' . $this->l('Always hidden') . '</td>                        <td><input type="radio" name="visibility_' . $block . '" value="1" '. ($settings[$block]==1?'checked':'') . ' />' . $this->l('Always visible') . '</td>                        <td><input type="radio" name="visibility_' . $block . '" value="2" '. ($settings[$block]==2?'checked':'') . ' />' . $this->l('Visible after paid') . '</td>                        </tr>';          }                $this->_html .= '          </table>      </div>     </fieldset>                       <center><input type="submit" name="submitSetting" value="'.$this->l('Save').'" class="button" /></center>    </form>';   }     public function displayErrors()   {    $nbErrors = sizeof($this->_postErrors);    $this->_html .= '    <div class="alert error">     <h3>'.($nbErrors > 1 ? $this->l('There are') : $this->l('There is')).' '.$nbErrors.' '.($nbErrors > 1 ? $this->l('errors') : $this->l('error')).'</h3>     <ol>';    foreach ($this->_postErrors AS $error)     $this->_html .= '<li>'.$error.'</li>';    $this->_html .= '     </ol>    </div>';   }            function hookNewOrder($params)      {          if(!$this->active)return;          if(!isset($params['order']))return;          $this->updateTokenData($params['order']->id , $params['orderStatus']);             }          function hookPostUpdateOrderStatus($params)      {          if(!$this->active)return;          return $this->hookUpdateOrderStatus($params);      }          function hookUpdateOrderStatus($params)      {              if(!$this->active)return '';          $this->updateTokenData($params['id_order'], $params['newOrderStatus']);                 return '';         }         public function hookTop($params)   {       global $cookie,$smarty;          if(!$this->active)return;               Configuration::updateValue('PS_BLOCK_CART_AJAX', 0);                    $smarty->assign('balance',self::GetToeknBalance($cookie->id_customer));         return $this->display(__FILE__, 'top.tpl');      }             public function hookExtraRight($params)   {       global $cookie,$smarty;          if(!$this->active)return;          $id_product = (int)Tools::getValue('id_product');    if ($id_product<=0)return;            $currency = new Currency($cookie->id_currency);              $price = Product::getPriceStatic($id_product, TRUE, NULL,  6, NULL, FALSE, TRUE, 1)/$currency->conversion_rate;                    $unitprice = floatval(Configuration::get('AGILE_PCREDIT_UNITPRICE'));          if($unitprice == 0)$unitprice = 1;          $tokens = $price / $unitprice;          $istoken = self::IsProductInLinkedCategory($id_product);          $ispaid = self::IsProductPaidByCustomer($id_product,$cookie->id_customer);       $repurchase = intval(Configuration::get('AGILE_PCREDIT_REPURCHASE'));          $smarty->assign(array(              'tokens'=>$tokens,              'repurchase' => $repurchase,              'istoken'=>$istoken,              'ispaid'=>$ispaid,              ));                         return $this->display(__FILE__, 'extra_right.tpl');      }             public function hookLeftColumn($params)   {          if(!$this->active)return;          if(intval(Configuration::get('AGILE_PCREDIT_POSITION')) != 1)return "";          return $this->hookLeftOrRight();   }     public function hookRightColumn($params)      {          if(!$this->active)return;            if(intval(Configuration::get('AGILE_PCREDIT_POSITION')) != 2)return "";          return $this->hookLeftOrRight();      }         public function hookFooter($params)   {       global $smarty, $cookie;          if(!$this->active)return;            $page = $_SERVER["SCRIPT_NAME"];          $idx = strrpos($page,"/");          $pageName = strtolower(substr($page,$idx+1));            if($pageName == 'product.php' AND self::IsProductInLinkedCategory(intval(Tools::getValue('id_product'))))return;          $ispaid = self::IsProductPaidByCustomer(intval(Tools::getValue('id_product')),$cookie->id_customer);       $repurchase = intval(Configuration::get('AGILE_PCREDIT_REPURCHASE'));            $blocksettings = $this->getBlockSettings();            $smarty->assign(array(              'ispaid' => $ispaid?'true':'false',              'repurchase' => $repurchase?'true':'false',              'istoken' => self::IsProductInLinkedCategory(intval(Tools::getValue('id_product')))?'true':'false',              'hideImages' => ($blocksettings['Images'] == 1 OR ($ispaid AND $blocksettings['Images'] == 2))?'false':'true',                      'hideShortDesc' => ($blocksettings['ShortDesc'] == 1 OR ($ispaid AND $blocksettings['ShortDesc'] == 2))?'false':'true',                      'hideColorPicker' => ($blocksettings['ColorPicker'] == 1 OR ($ispaid AND $blocksettings['ColorPicker'] == 2))?'false':'true',                      'hideBuyBlock' => ($blocksettings['BuyBlock'] == 1 OR ($ispaid AND $blocksettings['BuyBlock'] == 2))?'false':'true',                      'hideQuantityDiscount' => ($blocksettings['QuantityDiscount'] == 1 OR ($ispaid AND $blocksettings['hideQuantityDiscount'] == 2))?'false':'true',                      'hideMoreInfo' => ($blocksettings['MoreInfo'] == 1 OR ($ispaid AND $blocksettings['MoreInfo'] == 2))?'false':'true',                      'cfmmsg' => $this->l('Required tokens will be deducted from you account.Are you sure want to proceed to purchase the proructs?')          ));         return $this->display(__FILE__, 'footer.tpl');      }                private function hookLeftOrRight()      {    global $smarty, $cookie, $cart;            $category = new Category(intval(Configuration::get('AGILE_PCREDIT_CID')));          $results = $category->getProducts($cookie->id_lang, 1, 10);          $tokenpkgs = array();            foreach($results AS $result)          {           $product = new Product($result['id_product'], true, intval($cookie->id_lang));        $images = $product->getImages(intval($cookie->id_lang));        foreach ($images AS $k => $image)        {         if ($image['cover'])         {          $cover = $image;          $cover['id_image'] = intval($product->id).'-'.$cover['id_image'];          $cover['id_image_only'] = intval($image['id_image']);         }        }        if (!isset($cover))         $cover = array('id_image' => Language::getIsoById($cookie->id_lang).'-default', 'legend' => 'No picture', 'title' => 'No picture');                $tokenpkgs[] = array('product' => $product, 'cover' => $cover);          }          $smarty->assign(array(                  'tokenpkgs' => $tokenpkgs              ));       return $this->display(__FILE__, 'agileprepaidcredit.tpl');      }                          public static function log_message($msg)      {          $handle = fopen(dirname(__FILE__). "/debug.log", "a+");          if(!$handle)return;          $reffer  = "";          if(isset($_SERVER['HTTP_REFERER']))$reffer = $_SERVER['HTTP_REFERER'];          fwrite($handle, date("H:i:s") . "," . $reffer . "," . $msg . "\r\n");          fclose($handle);      }             function updateTokenData($id_order,$orderStatus)      {    if(!isset($orderStatus))return;    if(!intval($id_order))return;                    if($orderStatus->id != 2)return;             $order = new Order($id_order);          if(!Validate::isLoadedObject($order))return;                     $sql = 'SELECT id_order FROM `'._DB_PREFIX_.'customer_credit` WHERE id_order=' . $id_order . ' AND id_customer=' . $order->id_customer;          $exists = Db::getInstance()->getRow($sql);          if(isset($exists) AND intval($exists['id_order'])>0)return;                     $sql = 'SELECT COUNT(*) AS num FROM '._DB_PREFIX_.'order_detail od                  INNER JOIN '._DB_PREFIX_.'category_product  cp  ON od.product_id = cp.id_product                  WHERE cp.id_category = ' . Configuration::get('AGILE_PCREDIT_CID') . ' AND id_order =' . $id_order . '                  ';          $tokenproducts = Db::getInstance()->getRow($sql);          $istokenpackage = (isset($tokenproducts['num']) AND intval($tokenproducts['num'])>0);                    $unitprice = floatval(Configuration::get('AGILE_PCREDIT_UNITPRICE'));          if($unitprice == 0)$unitprice = 1;            $tokens = 0;          if(!$istokenpackage)          {              $theOrder = new Order($id_order);              $currency = new Currency($order->id_currency);              $tokens = $tokens - $theOrder->total_paid / $unitprice / $currency->conversion_rate;          }          else          {                                  $sql = 'SELECT p.`id_product`,p.`price`,a.`product_quantity`                   FROM `'._DB_PREFIX_.'order_detail` a                      LEFT JOIN `'._DB_PREFIX_.'product` p ON a.`product_id` = p.`id_product`                  WHERE a.`id_order` = ' . $order->id;              $products = Db::getinstance()->ExecuteS($sql);        foreach ($products AS $key => $product)           {                            if(self::IsProductInLinkedCategory(intval($product['id_product'])))               {                                                     $tokens = $tokens + $product['price'] * intval($product['product_quantity']) / $unitprice;                                  }           }       }       $sql = 'INSERT INTO `'._DB_PREFIX_.'customer_credit` (id_customer,id_order,units,date_add) VALUES (' . $order->id_customer. ','. $order->id .','. $tokens . ',\'' . date('Y-m-d H:i:s') . '\')';          Db::getInstance()->Execute($sql);       return '';      }        public static function GetToeknBalance($id_customer)      {          if(!intval($id_customer))return 0;          $sql = 'SELECT SUM(units) AS balance FROM `'._DB_PREFIX_.'customer_credit` WHERE id_customer=' . $id_customer;          $result = Db::getInstance()->getRow($sql);          if(isset($result['balance']) AND intval($result['balance'])>0)return intval($result['balance']);          return 0;      }            public static function IsProductPaidByCustomer($id_product,$id_customer)      {          if(!intval($id_product))return false;          if(!intval($id_customer))return false;          $sql = 'SELECT COUNT(*) AS paid                       FROM '._DB_PREFIX_.'customer_credit a                         LEFT JOIN '._DB_PREFIX_.'order_detail pd ON a.id_order = pd.id_order                      WHERE a.id_customer = ' . intval($id_customer) . ' AND pd.product_id =' . intval($id_product);          $result = Db::getInstance()->getRow($sql);          if(isset($result['paid']) AND intval($result['paid'])>0)return true;          return false;      }            public static function IsProductInLinkedCategory($id_product)      {          $sql = 'SELECT `id_category` from `'._DB_PREFIX_.'category_product` WHERE `id_category`=' . Configuration::get('AGILE_PCREDIT_CID') . ' AND id_product =' . $id_product;          $result = Db::getInstance()->getRow($sql);          if(isset($result['id_category']) AND intval($result['id_category'])>0)return true;          return false;      }            public function getBlockSettings()      {          $settings = array();       $data = file(dirname(__FILE__) . '/blocksettings.dat');       $items = $this->getInitSetting();       if(!empty($data))$items = explode(',',$data[0]);          foreach($items AS $item)          {              $nv = explode(':',$item);              if(empty($nv))continue;              $len = count($nv);              if($len == 1)$settings[$nv[0]] = 1;              else $settings[$nv[0]] = $nv[1];           }          return $settings;      }            private function saveBlockSettings()      {          $data = '';       foreach($this->getInfoBlocks() AS $block=>$mapping)       {           if(!empty($data))$data = $data . ',';           $data = $data . $block . ':' . $_POST['visibility_' . $block];          }                    $handle = fopen(dirname(__FILE__). "/blocksettings.dat",'w');          if(!$handle)return;          fwrite($handle, $data);          fclose($handle);                }            public function getInfoBlocks()      {          $infoBlocks = array();          $infoBlocks['Images'] = $this->l('Product Image Block');          $infoBlocks['ShortDesc'] = $this->l('Short Description Block');          $infoBlocks['BuyBlock'] = $this->l('Price Buy Block');          $infoBlocks['ColorPicker'] = $this->l('Color Picker Block');          $infoBlocks['QuantityDiscount'] = $this->l('Quantity Discount Block');          $infoBlocks['MoreInfo'] = $this->l('More Info Block');            return $infoBlocks;        }            private function getInitSetting()      {          $items = array();       foreach($this->getInfoBlocks() AS $block=>$mapping)       {           $items[] = $block . ":1";       }       return $items;      }  }  